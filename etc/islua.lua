assert(type(arg[1]) == "string", "String expected")

local luaG = {
"string",
"string.sub",
"string.upper",
"string.len",
"string.gfind",
"string.rep",
"string.find",
"string.match",
"string.char",
"string.dump",
"string.gmatch",
"string.reverse",
"string.byte",
"string.format",
"string.gsub",
"string.lower",
"xpcall",
"package",
"package.path",
"package.cpath",
"package.preload",
"package.config",
"package.loaders",
"package.loadlib",
"package.loaded",
"package.seeall",
"tostring",
"print",
"os",
"os.exit",
"os.setlocale",
"os.date",
"os.getenv",
"os.difftime",
"os.remove",
"os.time",
"os.tmpname",
"os.clock",
"os.rename",
"os.execute",
"unpack",
"require",
"getfenv",
"setmetatable",
"next",
"assert",
"tonumber",
"io",
"io.lines",
"io.write",
"io.close",
"io.flush",
"io.open",
"io.output",
"io.type",
"io.read",
"io.stderr",
"io.stdin",
"io.input",
"io.stdout",
"io.popen",
"io.tmpfile",
"rawequal",
"collectgarbage",
"getmetatable",
"module",
"rawset",
"math",
"math.sinh",
"math.log",
"math.max",
"math.acos",
"math.huge",
"math.ldexp",
"math.pi",
"math.cos",
"math.tanh",
"math.pow",
"math.deg",
"math.tan",
"math.cosh",
"math.random",
"math.randomseed",
"math.frexp",
"math.ceil",
"math.floor",
"math.rad",
"math.abs",
"math.sqrt",
"math.modf",
"math.asin",
"math.min",
"math.mod",
"math.fmod",
"math.log10",
"math.atan2",
"math.exp",
"math.sin",
"math.atan",
"debug",
"debug.getupvalue",
"debug.debug",
"debug.getlocal",
"debug.sethook",
"debug.getmetatable",
"debug.gethook",
"debug.setmetatable",
"debug.setlocal",
"debug.traceback",
"debug.setfenv",
"debug.getinfo",
"debug.setupvalue",
"debug.getregistry",
"debug.getfenv",
"pcall",
"table",
"table.setn",
"table.insert",
"table.getn",
"table.foreachi",
"table.maxn",
"table.foreach",
"table.concat",
"table.sort",
"table.remove",
"newproxy",
"type",
"coroutine",
"coroutine.resume",
"coroutine.yield",
"coroutine.status",
"coroutine.wrap",
"coroutine.create",
"coroutine.running",
"_G",
"select",
"gcinfo",
"pairs",
"rawget",
"loadstring",
"ipairs",
"_VERSION",
"dofile",
"setfenv",
"load",
"error",
"loadfile",
}

for i, v in ipairs(luaG) do
  if arg[1] == v then
    return 1, "Lua API"
  end
end

if safeloadstring(arg[1]) then
  return 2, "Lua code"
end

local luaKeywords = {
  "and", "break", "do", "else", "elseif",
  "end", "false", "for", "function", "if",
  "in", "local", "nil", "not", "or",
  "repeat", "return", "then", "true", "until", "while",
}

for i, v in ipairs(luaKeywords) do
  if arg[1] == v then
    return 3, "Lua keyword"
  end
end

return false, "Not Lua"

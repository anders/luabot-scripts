API "1.1"
-- stolen from xt / torhve

local unicode = require 'unicode'

local an = [[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789,.?!"'`()[]{}<>&_]]
local charmaps = {
  ci = '‚í∂‚í∑‚í∏‚íπ‚í∫‚íª‚íº‚íΩ‚íæ‚íø‚ìÄ‚ìÅ‚ìÇ‚ìÉ‚ìÑ‚ìÖ‚ìÜ‚ìá‚ìà‚ìâ‚ìä‚ìã‚ìå‚ìç‚ìé‚ìè‚ìê‚ìë‚ìí‚ìì‚ìî‚ìï‚ìñ‚ìó‚ìò‚ìô‚ìö‚ìõ‚ìú‚ìù‚ìû‚ìü‚ì†‚ì°‚ì¢‚ì£‚ì§‚ì•‚ì¶‚ìß‚ì®‚ì©‚ì™‚ë†‚ë°‚ë¢‚ë£‚ë§‚ë•‚ë¶‚ëß‚ë®',
  bl = 'ùîÑùîÖ‚Ñ≠ùîáùîàùîâùîä‚Ñå‚Ñëùîçùîéùîèùîêùîëùîíùîìùîî‚Ñúùîñùîóùîòùîôùîöùîõùîú‚Ñ®ùîûùîüùî†ùî°ùî¢ùî£ùî§ùî•ùî¶ùîßùî®ùî©ùî™ùî´ùî¨ùî≠ùîÆùîØùî∞ùî±ùî≤ùî≥ùî¥ùîµùî∂ùî∑',
  ud = [[‚àÄB∆ÜD∆é‚Ñ≤◊§HI≈øKÀ•WNO‘ÄQRS‚î¥‚à©ŒõMX‚ÖÑZ…êq…îp«ù…ü∆É…•·¥â…æ ûl…Øuodb…πs án å çx éz0∆ñ·ÑÖ∆ê„Ñ£œõ9„Ñ•86'Àô¬ø¬°,,,)(][}{><‚Öã‚Äæ]],
  nc = [[üÖêüÖëüÖíüÖìüÖîüÖïüÖñüÖóüÖòüÖôüÖöüÖõüÖúüÖùüÖûüÖüüÖ†üÖ°üÖ¢üÖ£üÖ§üÖ•üÖ¶üÖßüÖ®üÖ©üÖêüÖëüÖíüÖìüÖîüÖïüÖñüÖóüÖòüÖôüÖöüÖõüÖúüÖùüÖûüÖüüÖ†üÖ°üÖ¢üÖ£üÖ§üÖ•üÖ¶üÖßüÖ®üÖ©‚ìø]],
  sq = [[üÑ∞üÑ±üÑ≤üÑ≥üÑ¥üÑµüÑ∂üÑ∑üÑ∏üÑπüÑ∫üÑªüÑºüÑΩüÑæüÑøüÖÄüÖÅüÖÇüÖÉüÖÑüÖÖüÖÜüÖáüÖàüÖâüÑ∞üÑ±üÑ≤üÑ≥üÑ¥üÑµüÑ∂üÑ∑üÑ∏üÑπüÑ∫üÑªüÑºüÑΩüÑæüÑøüÖÄüÖÅüÖÇüÖÉüÖÑüÖÖüÖÜüÖáüÖàüÖâ0123456789,‚ä°]],
  ns = [[üÖ∞üÖ±üÖ≤üÖ≥üÖ¥üÖµüÖ∂üÖ∑üÖ∏üÖπüÖ∫üÖªüÖºüÖΩüÖæüÖøüÜÄüÜÅüÜÇüÜÉüÜÑüÜÖüÜÜüÜáüÜàüÜâüÖ∞üÖ±üÖ≤üÖ≥üÖ¥üÖµüÖ∂üÖ∑üÖ∏üÖπüÖ∫üÖªüÖºüÖΩüÖæüÖøüÜÄüÜÅüÜÇüÜÉüÜÑüÜÖüÜÜüÜáüÜàüÜâ]],
  ds = [[ùî∏ùîπ‚ÑÇùîªùîºùîΩùîæ‚ÑçùïÄùïÅùïÇùïÉùïÑ‚ÑïùïÜ‚Ñô‚Ñö‚Ñùùïäùïãùïåùïçùïéùïèùïê‚Ñ§ùïíùïìùïîùïïùïñùïóùïòùïôùïöùïõùïúùïùùïûùïüùï†ùï°ùï¢ùï£ùï§ùï•ùï¶ùïßùï®ùï©ùï™ùï´ùüòùüôùüöùüõùüúùüùùüûùüüùü†ùü°]],
  bo = [[ùêÄùêÅùêÇùêÉùêÑùêÖùêÜùêáùêàùêâùêäùêãùêåùêçùêéùêèùêêùêëùêíùêìùêîùêïùêñùêóùêòùêôùêöùêõùêúùêùùêûùêüùê†ùê°ùê¢ùê£ùê§ùê•ùê¶ùêßùê®ùê©ùê™ùê´ùê¨ùê≠ùêÆùêØùê∞ùê±ùê≤ùê≥ùüéùüèùüêùüëùüíùüìùüîùüïùüñùüó]],
  bi = [[ùë®ùë©ùë™ùë´ùë¨ùë≠ùëÆùëØùë∞ùë±ùë≤ùë≥ùë¥ùëµùë∂ùë∑ùë∏ùëπùë∫ùëªùëºùëΩùëæùëøùíÄùíÅùíÇùíÉùíÑùíÖùíÜùíáùíàùíâùíäùíãùíåùíçùíéùíèùíêùíëùííùíìùíîùíïùíñùíóùíòùíôùíöùíõ0123456789]],
  bs = [[ùìêùìëùìíùììùìîùìïùìñùìóùìòùìôùìöùìõùìúùìùùìûùìüùì†ùì°ùì¢ùì£ùì§ùì•ùì¶ùìßùì®ùì©ùì™ùì´ùì¨ùì≠ùìÆùìØùì∞ùì±ùì≤ùì≥ùì¥ùìµùì∂ùì∑ùì∏ùìπùì∫ùìªùìºùìΩùìæùìøùîÄùîÅùîÇùîÉ]],
  pt = [[‚íú‚íù‚íû‚íü‚í†‚í°‚í¢‚í£‚í§‚í•‚í¶‚íß‚í®‚í©‚í™‚í´‚í¨‚í≠‚íÆ‚íØ‚í∞‚í±‚í≤‚í≥‚í¥‚íµ‚íú‚íù‚íû‚íü‚í†‚í°‚í¢‚í£‚í§‚í•‚í¶‚íß‚í®‚í©‚í™‚í´‚í¨‚í≠‚íÆ‚íØ‚í∞‚í±‚í≤‚í≥‚í¥‚íµ0‚ë¥‚ëµ‚ë∂‚ë∑‚ë∏‚ëπ‚ë∫‚ëª‚ëº]],
  tl = [[‡∏Ñ‡πíœÇ‡πî—î≈¶ÔªÆ—í‡πÄ◊ü–∫l‡πì‡∏†‡πè◊ß·ª£–≥‡∏£t‡∏¢◊©‡∏¨◊•◊êz‡∏Ñ‡πíœÇ‡πî—î≈¶ÔªÆ—í‡πÄ◊ü–∫l‡πì‡∏†‡πè◊ß·ª£–≥‡∏£t‡∏¢◊©‡∏¨◊•◊êz0123456789,.ÿü!"'`()[]{}¬´¬ª&_]],
  ru = [[–î–¨CD–óFGHIJ–öLM–ò–§PQ–ØST–¶V–®–ñ–£Z–¥—åcd–∑fghij–∫lm–∏—Ñpq—èst—Üv—à–∂—Éz0123456789,.?!"'`()[]{}<>&_]]
}
local codepoints
codepoints = function(str)
  return str:gmatch("[%z\1-\127\194-\244][\128-\191]*")
end
local mimic = {
  [" "] = {
    "¬†",
    "‚ÄÄ",
    "‚ÄÅ",
    "‚ÄÇ",
    "‚ÄÉ",
    "‚ÄÑ",
    "‚ÄÖ",
    "‚ÄÜ",
    "‚Äá",
    "‚Äà",
    "‚Äâ",
    "‚Ää",
    "‚ÄØ",
    "‚Åü"
  },
  ["!"] = {
    "ÔºÅ",
    "«É",
    "‚µë",
    "Ô∏ï",
    "Ôπó"
  },
  ["\""] = {
    "ÔºÇ"
  },
  ["#"] = {
    "ÔºÉ",
    "Ôπü"
  },
  ["$"] = {
    "ÔºÑ",
    "Ôπ©"
  },
  ["%"] = {
    "ÔºÖ",
    "Ÿ™",
    "‚Åí",
    "Ôπ™"
  },
  ["&"] = {
    "ÔºÜ",
    "Ôπ†"
  },
  ["'"] = {
    "Ôºá",
    " π"
  },
  ["("] = {
    "Ôºà",
    "‚üÆ",
    "Ôπô"
  },
  [")"] = {
    "Ôºâ",
    "‚üØ",
    "Ôπö"
  },
  ["*"] = {
    "Ôºä",
    "‚ãÜ",
    "Ôπ°"
  },
  ["+"] = {
    "Ôºã",
    "·õ≠",
    "Ôπ¢"
  },
  [","] = {
    "Ôºå",
    "Àè",
    "·õß",
    "‚Äö"
  },
  ["-"] = {
    "Ôºç",
    "Àó",
    "·öÄ",
    "·ùç",
    "·†Ü",
    "·±º",
    "‚àí",
    "‚éØ",
    "‚éº",
    "‚ï¥",
    "‚≤ª",
    "‚≤ª",
    "„Éº",
    "„Ñß",
    "Ôπ£"
  },
  ["."] = {
    "Ôºé",
    "‚Ä§"
  },
  ["/"] = {
    "Ôºè",
    "·úµ",
    "‚ÅÑ",
    "‚àï",
    "‚ß∏",
    "‚≥Ü",
    "„Ä≥"
  },
  ["0"] = {
    "·±ê"
  },
  ["2"] = {
    "·íø"
  },
  ["3"] = {
    "∆∑",
    "·¢É",
    "‚Ñ®",
    "‚≥Ñ",
    "‚≥å",
    "‚≥ç"
  },
  ["4"] = {
    "·èé"
  },
  ["6"] = {
    "·èÆ"
  },
  ["9"] = {
    "·è≠"
  },
  [":"] = {
    "Ôºö",
    "Àê",
    "À∏",
    "÷â",
    "·ç°",
    "·õ¨",
    "·†Ñ",
    "·±∫",
    "‚Åö",
    "‚à∂",
    "‚†Ü",
    "Ô∏ì",
    "Ô∏∞",
    "Ôπï"
  },
  [";"] = {
    "Ôºõ",
    "Õæ",
    "Ô∏î",
    "Ôπî"
  },
  ["<"] = {
    "Ôºú",
    "ÀÇ",
    "‚Äπ",
    "‚â∫",
    "‚ùÆ",
    "‚µ¶",
    "„Ä±",
    "„Ñë",
    "Ôπ§"
  },
  ["="] = {
    "Ôºù",
    "‚ïê",
    "‚öå",
    "„Ç†",
    "Ôπ¶"
  },
  [">"] = {
    "Ôºû",
    "ÀÉ",
    "‚Ä∫",
    "‚âª",
    "‚ùØ",
    "Ôπ•"
  },
  ["?"] = {
    "Ôºü",
    "Ô∏ñ",
    "Ôπñ"
  },
  ["@"] = {
    "Ôº†",
    "Ôπ´"
  },
  ["A"] = {
    "Œë",
    "–ê",
    "·é™"
  },
  ["B"] = {
    "Œí",
    "–í",
    "·è¥",
    "·ó∑",
    "‚≤Ç"
  },
  ["C"] = {
    "œπ",
    "–°",
    "·èü",
    "‚Ö≠",
    "‚≤§"
  },
  ["D"] = {
    "·é†",
    "·ó™",
    "‚ÖÆ"
  },
  ["E"] = {
    "Œï",
    "–ï",
    "·é¨"
  },
  ["F"] = {
    "·ñ¥"
  },
  ["G"] = {
    "‘å",
    "·èÄ"
  },
  ["H"] = {
    "Œó",
    "–ù",
    "·ãò",
    "·éª",
    "·ïº",
    "‚≤é"
  },
  ["I"] = {
    "Œô",
    "–Ü",
    "‚Ö†"
  },
  ["J"] = {
    "–à",
    "·é´",
    "·íç"
  },
  ["K"] = {
    "Œö",
    "Œö",
    "·è¶",
    "·õï",
    "‚Ñ™",
    "‚≤î"
  },
  ["L"] = {
    "·èû",
    "·í™",
    "‚Ö¨",
    "‚≥ê"
  },
  ["M"] = {
    "Œú",
    "œ∫",
    "–ú",
    "·é∑",
    "‚ÖØ"
  },
  ["N"] = {
    "Œù",
    "‚≤ö"
  },
  ["O"] = {
    "Œü",
    "–û",
    "·±õ",
    "‚≤û"
  },
  ["P"] = {
    "Œ°",
    "–†",
    "·è¢",
    "‚≤¢"
  },
  ["Q"] = {
    "‘ö",
    "·Ç≥",
    "‚µï"
  },
  ["R"] = {
    "·é°",
    "·èí",
    "·ñá"
  },
  ["S"] = {
    "–Ö",
    "·ÇΩ",
    "·èö"
  },
  ["T"] = {
    "Œ§",
    "–¢",
    "·é¢"
  },
  ["V"] = {
    "·èô",
    "‚Ö§"
  },
  ["W"] = {
    "·é≥",
    "·èî"
  },
  ["X"] = {
    "Œß",
    "–•",
    "‚Ö©",
    "‚≤¨"
  },
  ["Y"] = {
    "Œ•",
    "‚≤®"
  },
  ["Z"] = {
    "Œñ",
    "·èÉ"
  },
  ["["] = {
    "Ôºª"
  },
  ["\\"] = {
    "Ôºº",
    "‚àñ",
    "‚ßµ",
    "‚ßπ",
    "„Äµ",
    "Ôπ®"
  },
  ["]"] = {
    "ÔºΩ"
  },
  ["^"] = {
    "Ôºæ",
    "ÀÑ",
    "ÀÜ",
    "·∂∫",
    "‚åÉ"
  },
  ["_"] = {
    "Ôºø",
    "Àç",
    "‚öä",
    "Ôπò"
  },
  ["`"] = {
    "ÔΩÄ",
    "Àã",
    "·øØ",
    "‚Äµ"
  },
  ["a"] = {
    "…ë",
    "–∞"
  },
  ["c"] = {
    "œ≤",
    "—Å",
    "‚ÖΩ"
  },
  ["d"] = {
    "‘Å",
    "‚Öæ"
  },
  ["e"] = {
    "–µ",
    "·•±"
  },
  ["g"] = {
    "…°"
  },
  ["h"] = {
    "“ª"
  },
  ["i"] = {
    "—ñ",
    "‚Ö∞"
  },
  ["j"] = {
    "œ≥",
    "—ò"
  },
  ["l"] = {
    "‚Öº"
  },
  ["m"] = {
    "‚Öø"
  },
  ["n"] = {
    "·•í"
  },
  ["o"] = {
    "Œø",
    "–æ",
    "‡≥¶",
    "‡¥†",
    "‡µ¶",
    "·¶û",
    "·ßê",
    "‚≤ü"
  },
  ["p"] = {
    "—Ä",
    "‚≤£"
  },
  ["s"] = {
    "—ï"
  },
  ["u"] = {
    "·•ô",
    "‚à™"
  },
  ["v"] = {
    "·¥†",
    "‚Ö¥",
    "‚à®",
    "‚ãÅ"
  },
  ["w"] = {
    "·¥°"
  },
  ["x"] = {
    "—Ö",
    "‚Öπ",
    "‚≤≠"
  },
  ["y"] = {
    "—É",
    "·ªø"
  },
  ["z"] = {
    "·§Å",
    "·¥¢"
  },
  ["{"] = {
    "ÔΩõ",
    "Ôπõ"
  },
  ["|"] = {
    "ÔΩú",
    "«Ä",
    "·õÅ",
    "‚éú",
    "‚éü",
    "‚é¢",
    "‚é•",
    "‚é™",
    "‚éÆ",
    "‚ºÅ",
    "„Ä°",
    "‰∏®",
    "Ô∏±",
    "Ô∏≥",
    "Ôø®"
  },
  ["}"] = {
    "ÔΩù",
    "Ôπú"
  },
  ["~"] = {
    "ÔΩû",
    "Àú",
    "‚Åì",
    "‚àº",
    "„Äú"
  }
}
local maps = { }
for charmap, chars in pairs(charmaps) do
  local i = 1
  maps[charmap] = { }
  for uchar in chars:gmatch(unicode.charpatt) do
    maps[charmap][an:sub(i, i)] = uchar
    i = i + 1
  end
end
local wireplace
wireplace = function(offset, arg)
  local s = arg or ''
  local t = { }
  for i = 1, #s do
    local bc = string.byte(s, i, i)
    if bc == 32 and offset == 0xFEE0 then
      t[#t + 1] = '\227\128\128'
    elseif bc == 32 then
      t[#t + 1] = ' '
    elseif bc < 0x80 then
      t[#t + 1] = unicode.encode(offset + bc)
    else
      t[#t + 1] = s:sub(i, i)
    end
  end
  return table.concat(t, "")
end
local remap
remap = function(map, s)
  return table.concat((function()
    local _accum_0 = { }
    local _len_0 = 1
    for i = 1, #s do
      _accum_0[_len_0] = map[s:sub(i, i)] or s:sub(i, i)
      _len_0 = _len_0 + 1
    end
    return _accum_0
  end)(), '')
end
local zalgo
zalgo = function(text, intensity)
  if intensity == nil then
    intensity = 50
  end
  text = text:sub(1, 512)
  local zalgo_chars = { }
  for i = 0x0300, 0x036f do
    zalgo_chars[i - 0x2ff] = unicode.encode(i)
  end
  zalgo_chars[#zalgo_chars + 1] = unicode.encode(0x0488)
  zalgo_chars[#zalgo_chars + 0] = unicode.encode(0x0489)
  local zalgoized = { }
  for letter in codepoints(text) do
    zalgoized[#zalgoized + 1] = letter
    local zalgo_num = math.random(1, intensity)
    for i = 1, zalgo_num do
      zalgoized[#zalgoized + 1] = zalgo_chars[math.random(1, #zalgo_chars)]
    end
  end
  return table.concat(zalgoized)
end

return remap(maps.ru, arg)

--[======[
return {
  PRIVMSG = {
    ['^%pwide (.+)$'] = function(self, source, destination, arg)
      return say(wireplace(0xFEE0, arg))
    end,
    ['^%pblackletter (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps.bl, arg))
    end,
    ['^%pcircled (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps.ci, arg))
    end,
    ['^%pzalgo (.+)$'] = function(self, source, destination, arg)
      return say(zalgo(arg, 7))
    end,
    ['^%pupsidedown (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps.ud, util.utf8.reverse(arg)))
    end,
    ['^%pflip (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps.ud, arg))
    end,
    ['^%pthrow (.+)$'] = function(self, source, destination, arg)
      return say("Ôºà‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ " .. tostring(remap(maps.ud, util.utf8.reverse(arg))))
    end,
    ['^%pparanthesized (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps.pt, arg))
    end,
    ['^%pnegcircle (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps['nc'], arg))
    end,
    ['^%psquare (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps.sq, arg))
    end,
    ['^%pnegsquare (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps.ns, arg))
    end,
    ['^%pdoublestruck (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps.ds, arg))
    end,
    ['^%pubold (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps.bo, arg))
    end,
    ['^%pbolditalic (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps.bi, arg))
    end,
    ['^%pboldscript (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps.bs, arg))
    end,
    ['^%pthai (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps.tl, arg))
    end,
    ['^%prussian (.+)$'] = function(self, source, destination, arg)
      return say(remap(maps.ru, arg))
    end,
    ['^%putfuk (.+)$'] = function(self, source, destination, arg)
      local keys
      do
        local _accum_0 = { }
        local _len_0 = 1
        for x, _ in pairs(maps) do
          _accum_0[_len_0] = x
          _len_0 = _len_0 + 1
        end
        keys = _accum_0
      end
      return say(table.concat((function()
        local _accum_0 = { }
        local _len_0 = 1
        for letter in codepoints(arg) do
          _accum_0[_len_0] = remap(maps[keys[math.random(#keys)]], letter)
          _len_0 = _len_0 + 1
        end
        return _accum_0
      end)()))
    end,
    ['^%pmimic (.+)$'] = function(self, source, destination, arg)
      local out = { }
      for uchar in util.utf8.chars(arg) do
        local mimictbl = mimic[uchar]
        if mimictbl then
          out[#out + 1] = mimictbl[math.random(#mimictbl)]
        else
          out[#out + 1] = uchar
        end
      end
      return say(table.concat(out))
    end,
    ['^%pul (.+)$'] = function(self, source, destination, arg)
      return say(table.concat((function()
        local _accum_0 = { }
        local _len_0 = 1
        for letter in codepoints(arg) do
          _accum_0[_len_0] = letter .. util.utf8.char(0x0332)
          _len_0 = _len_0 + 1
        end
        return _accum_0
      end)()))
    end
  }
}
]======]
